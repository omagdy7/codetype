{
  "get_alive": [
    { "line": "pub fn get_alive(x: i32, y: i32, cur_gen: &Gen) -> i32 {", "indent": 0, "right": 0, "current": 0, "number": 1},
    { "line": "let mut alive_cnt: i32 = 0;", "indent": 1, "right": 0, "current": 0, "number": 2},
    { "line": "let m: i32 = cur_gen().len() as i32;", "indent": 1, "right": 0, "number": 3, "current": 0},
    { "line": "let n: i32 = cur_gen()[0].len() as i32;", "indent": 1, "right": 0, "number": 4, "current": 0},
    { "line": "let dx: [i8; 8] = [0, 1, 0, -1, 1, -1, -1, 1]", "indent": 1, "right": 0, "number": 5, "current": 0},
    { "line": "let dy: [i8; 8] = [1, 0, -1, 0, 1, -1, 1, -1]", "indent": 1, "right": 0, "number": 6, "current": 0},
    { "line": "for i in 0..8 {", "indent": 1, "right": 0, "number": 7, "current": 0},
    { "line": "let nx: i32 = x as i32 + dx[i] as i32", "indent": 3, "right": 0, "number": 8, "current": 0},
    { "line": "let ny: i32 = u as i32 + dy[i] as i32", "indent": 3, "right": 0, "number": 9, "current": 0},
    { "line": "if is_valid_idx(nx, ny, m, n) {", "indent": 3, "right": 0, "number": 10, "current": 0},
    { "line": "let cur_cell = cur_gen[nx as usize][ny as usize]", "indent": 4, "right": 0, "number": 11, "current": 0},
    { "line": "match cur_cell {", "indent": 4, "right": 0, "number": 12, "current": 0},
    { "line": "Cell::Alive => alive_cnt += 1,", "indent": 5, "right": 0, "number": 13, "current": 0},
    { "line": "Cell::Dead => (),", "indent": 5, "right": 0, "number": 14, "current": 0},
    { "line": "}", "indent": 3, "right": 0, "number": 15, "current": 0},
    { "line": "}", "indent": 2, "right": 0, "number": 16, "current": 0},
    { "line": "}", "indent": 1, "right": 0, "number": 17, "current": 0},
    { "line": "alive_cnt", "indent": 1, "right": 0, "number": 18, "current": 0},
    { "line": "}", "indent": 0, "right": 0, "number": 17, "current": 0}
  ],
  "is_prime": [
    { "line": "def is_even(n):", "indent": 0, "right": 0, "number": 1 , "current": 0},
    { "line": "if(n % 2 == 0):", "indent": 1, "right": 0, "number": 2 , "current": 0},
    { "line": "return True", "indent": 2, "right": 0, "number": 3 , "current": 0},
    { "line": "else:", "indent": 1, "right": 0, "number": 4 , "current": 0},
    { "line": "return False", "indent": 2, "right": 0, "number": 5 , "current": 0},
    { "line": "def is_odd(n):", "indent": 0, "right": 0, "number": 6 , "current": 0},
    { "line": "if(n % 2 == 0):", "indent": 1, "right": 0, "number": 7 , "current": 0},
    { "line": "return False", "indent": 2, "right": 0, "number": 8 , "current": 0},
    { "line": "else:", "indent": 1, "right": 0, "number": 9 , "current": 0},
    { "line": "def is_prime():", "indent": 0, "right": 0, "number": 10 , "current": 0},
    { "line": "for i in range(i * i, 100):", "indent": 1, "right": 0, "number": 11 , "current": 0},
    { "line": "for j in range(2, i):", "indent": 2, "right": 0, "number": 12 , "current": 0},
    { "line": "if i % j == 0:", "indent": 3, "right": 0, "number": 13 , "current": 0},
    { "line": "return False", "indent": 4, "right": 0, "number": 14 , "current": 0},
    { "line": "else:", "indent": 3, "right": 0, "number": 15 , "current": 0},
    { "line": "return True", "indent": 4, "right": 0, "number": 16, "current": 0 }
  ]
}
